/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.datamill-js-client);
  }
}(this, function(expect, datamill-js-client) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new datamill-js-client.DataMillApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataMillApi', function() {
    describe('checkBIC', function() {
      it('should call checkBIC successfully', function(done) {
        //uncomment below and update the code to test checkBIC
        //instance.checkBIC(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkEmailDomain', function() {
      it('should call checkEmailDomain successfully', function(done) {
        //uncomment below and update the code to test checkEmailDomain
        //instance.checkEmailDomain(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkEmailMailbox', function() {
      it('should call checkEmailMailbox successfully', function(done) {
        //uncomment below and update the code to test checkEmailMailbox
        //instance.checkEmailMailbox(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkEmailSyntax', function() {
      it('should call checkEmailSyntax successfully', function(done) {
        //uncomment below and update the code to test checkEmailSyntax
        //instance.checkEmailSyntax(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkIBAN', function() {
      it('should call checkIBAN successfully', function(done) {
        //uncomment below and update the code to test checkIBAN
        //instance.checkIBAN(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkMobilePhone', function() {
      it('should call checkMobilePhone successfully', function(done) {
        //uncomment below and update the code to test checkMobilePhone
        //instance.checkMobilePhone(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkUrl', function() {
      it('should call checkUrl successfully', function(done) {
        //uncomment below and update the code to test checkUrl
        //instance.checkUrl(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkVAT', function() {
      it('should call checkVAT successfully', function(done) {
        //uncomment below and update the code to test checkVAT
        //instance.checkVAT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertCapitalFirst', function() {
      it('should call convertCapitalFirst successfully', function(done) {
        //uncomment below and update the code to test convertCapitalFirst
        //instance.convertCapitalFirst(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertLowerCase', function() {
      it('should call convertLowerCase successfully', function(done) {
        //uncomment below and update the code to test convertLowerCase
        //instance.convertLowerCase(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertUpperCase', function() {
      it('should call convertUpperCase successfully', function(done) {
        //uncomment below and update the code to test convertUpperCase
        //instance.convertUpperCase(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertWrap', function() {
      it('should call convertWrap successfully', function(done) {
        //uncomment below and update the code to test convertWrap
        //instance.convertWrap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extractHouseNumber', function() {
      it('should call extractHouseNumber successfully', function(done) {
        //uncomment below and update the code to test extractHouseNumber
        //instance.extractHouseNumber(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('formatPhoneNumber', function() {
      it('should call formatPhoneNumber successfully', function(done) {
        //uncomment below and update the code to test formatPhoneNumber
        //instance.formatPhoneNumber(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDUNSRating', function() {
      it('should call getDUNSRating successfully', function(done) {
        //uncomment below and update the code to test getDUNSRating
        //instance.getDUNSRating(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFirstNames', function() {
      it('should call getFirstNames successfully', function(done) {
        //uncomment below and update the code to test getFirstNames
        //instance.getFirstNames(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGender', function() {
      it('should call getGender successfully', function(done) {
        //uncomment below and update the code to test getGender
        //instance.getGender(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGenderExtended', function() {
      it('should call getGenderExtended successfully', function(done) {
        //uncomment below and update the code to test getGenderExtended
        //instance.getGenderExtended(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPhoneCountryCode', function() {
      it('should call getPhoneCountryCode successfully', function(done) {
        //uncomment below and update the code to test getPhoneCountryCode
        //instance.getPhoneCountryCode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPhoneticCode', function() {
      it('should call getPhoneticCode successfully', function(done) {
        //uncomment below and update the code to test getPhoneticCode
        //instance.getPhoneticCode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSocialMediaActivities', function() {
      it('should call getSocialMediaActivities successfully', function(done) {
        //uncomment below and update the code to test getSocialMediaActivities
        //instance.getSocialMediaActivities(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('locateAddress', function() {
      it('should call locateAddress successfully', function(done) {
        //uncomment below and update the code to test locateAddress
        //instance.locateAddress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveDUNS', function() {
      it('should call resolveDUNS successfully', function(done) {
        //uncomment below and update the code to test resolveDUNS
        //instance.resolveDUNS(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveVAT', function() {
      it('should call resolveVAT successfully', function(done) {
        //uncomment below and update the code to test resolveVAT
        //instance.resolveVAT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchAddress', function() {
      it('should call searchAddress successfully', function(done) {
        //uncomment below and update the code to test searchAddress
        //instance.searchAddress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchAddressMultiple', function() {
      it('should call searchAddressMultiple successfully', function(done) {
        //uncomment below and update the code to test searchAddressMultiple
        //instance.searchAddressMultiple(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchDUNS', function() {
      it('should call searchDUNS successfully', function(done) {
        //uncomment below and update the code to test searchDUNS
        //instance.searchDUNS(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchUndeliverableContact', function() {
      it('should call searchUndeliverableContact successfully', function(done) {
        //uncomment below and update the code to test searchUndeliverableContact
        //instance.searchUndeliverableContact(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchVAT', function() {
      it('should call searchVAT successfully', function(done) {
        //uncomment below and update the code to test searchVAT
        //instance.searchVAT(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
