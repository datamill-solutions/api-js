/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DatamillForApplications);
  }
}(this, function(expect, DatamillForApplications) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BusinessDataUndeliverableContactsSearchContact', function() {
    it('should create an instance of BusinessDataUndeliverableContactsSearchContact', function() {
      // uncomment below and update the code to test BusinessDataUndeliverableContactsSearchContact
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be.a(DatamillForApplications.BusinessDataUndeliverableContactsSearchContact);
    });

    it('should have the property gender (base name: "gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property titleOfNobility (base name: "title_of_nobility")', function() {
      // uncomment below and update the code to test the property titleOfNobility
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property street (base name: "street")', function() {
      // uncomment below and update the code to test the property street
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property streetAddition (base name: "street_addition")', function() {
      // uncomment below and update the code to test the property streetAddition
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property houseNumber (base name: "house_number")', function() {
      // uncomment below and update the code to test the property houseNumber
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property houseNumberAddition (base name: "house_number_addition")', function() {
      // uncomment below and update the code to test the property houseNumberAddition
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property zip (base name: "zip")', function() {
      // uncomment below and update the code to test the property zip
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country_code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property dateOfBirth (base name: "date_of_birth")', function() {
      // uncomment below and update the code to test the property dateOfBirth
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instane = new DatamillForApplications.BusinessDataUndeliverableContactsSearchContact();
      //expect(instance).to.be();
    });

  });

}));
