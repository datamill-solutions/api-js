/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.datamill-js-client);
  }
}(this, function(expect, datamill-js-client) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new datamill-js-client.AddressSearchResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AddressSearchResponse', function() {
    it('should create an instance of AddressSearchResponse', function() {
      // uncomment below and update the code to test AddressSearchResponse
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be.a(datamill-js-client.AddressSearchResponse);
    });

    it('should have the property countryIso2 (base name: "country_iso_2")', function() {
      // uncomment below and update the code to test the property countryIso2
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryIso3 (base name: "country_iso_3")', function() {
      // uncomment below and update the code to test the property countryIso3
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property stateName (base name: "state_name")', function() {
      // uncomment below and update the code to test the property stateName
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property stateCode (base name: "state_code")', function() {
      // uncomment below and update the code to test the property stateCode
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property county (base name: "county")', function() {
      // uncomment below and update the code to test the property county
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property district (base name: "district")', function() {
      // uncomment below and update the code to test the property district
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property zip (base name: "zip")', function() {
      // uncomment below and update the code to test the property zip
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property street (base name: "street")', function() {
      // uncomment below and update the code to test the property street
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property housenumber (base name: "housenumber")', function() {
      // uncomment below and update the code to test the property housenumber
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property additionalData (base name: "additional_data")', function() {
      // uncomment below and update the code to test the property additionalData
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property relevance (base name: "relevance")', function() {
      // uncomment below and update the code to test the property relevance
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property navigationLatitude (base name: "navigation_latitude")', function() {
      // uncomment below and update the code to test the property navigationLatitude
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property navigationLongitude (base name: "navigation_longitude")', function() {
      // uncomment below and update the code to test the property navigationLongitude
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

    it('should have the property matchlevel (base name: "matchlevel")', function() {
      // uncomment below and update the code to test the property matchlevel
      //var instane = new datamill-js-client.AddressSearchResponse();
      //expect(instance).to.be();
    });

  });

}));
