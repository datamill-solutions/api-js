/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DatamillForApplications);
  }
}(this, function(expect, DatamillForApplications) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DatamillForApplications.BusinessDataDunsResolveResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BusinessDataDunsResolveResponse', function() {
    it('should create an instance of BusinessDataDunsResolveResponse', function() {
      // uncomment below and update the code to test BusinessDataDunsResolveResponse
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be.a(DatamillForApplications.BusinessDataDunsResolveResponse);
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property statusDescription (base name: "status_description")', function() {
      // uncomment below and update the code to test the property statusDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property companyName (base name: "company_name")', function() {
      // uncomment below and update the code to test the property companyName
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property companyName2 (base name: "company_name_2")', function() {
      // uncomment below and update the code to test the property companyName2
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property continentName (base name: "continent_name")', function() {
      // uncomment below and update the code to test the property continentName
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country_code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property countryCode3 (base name: "country_code_3")', function() {
      // uncomment below and update the code to test the property countryCode3
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property zip (base name: "zip")', function() {
      // uncomment below and update the code to test the property zip
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property street (base name: "street")', function() {
      // uncomment below and update the code to test the property street
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property houseNumber (base name: "house_number")', function() {
      // uncomment below and update the code to test the property houseNumber
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "phone_number")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property faxNumber (base name: "fax_number")', function() {
      // uncomment below and update the code to test the property faxNumber
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property stateName (base name: "state_name")', function() {
      // uncomment below and update the code to test the property stateName
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property stateCode (base name: "state_code")', function() {
      // uncomment below and update the code to test the property stateCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property ceoName (base name: "ceo_name")', function() {
      // uncomment below and update the code to test the property ceoName
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property ceoTitle (base name: "ceo_title")', function() {
      // uncomment below and update the code to test the property ceoTitle
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property ceoSecondary (base name: "ceo_secondary")', function() {
      // uncomment below and update the code to test the property ceoSecondary
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property sicCode (base name: "sic_code")', function() {
      // uncomment below and update the code to test the property sicCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property sicDescription (base name: "sic_description")', function() {
      // uncomment below and update the code to test the property sicDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property yearStarted (base name: "year_started")', function() {
      // uncomment below and update the code to test the property yearStarted
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property annualTurnoverLocalCurrency (base name: "annual_turnover_local_currency")', function() {
      // uncomment below and update the code to test the property annualTurnoverLocalCurrency
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property annualTurnoverIndicatorCode (base name: "annual_turnover_indicator_code")', function() {
      // uncomment below and update the code to test the property annualTurnoverIndicatorCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property annualTurnoverIndicatorDescription (base name: "annual_turnover_indicator_description")', function() {
      // uncomment below and update the code to test the property annualTurnoverIndicatorDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property annualTurnoverUsd (base name: "annual_turnover_usd")', function() {
      // uncomment below and update the code to test the property annualTurnoverUsd
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property netIncome (base name: "net_income")', function() {
      // uncomment below and update the code to test the property netIncome
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property netIncomeUsd (base name: "net_income_usd")', function() {
      // uncomment below and update the code to test the property netIncomeUsd
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property netWorth (base name: "net_worth")', function() {
      // uncomment below and update the code to test the property netWorth
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property netWorthUsd (base name: "net_worth_usd")', function() {
      // uncomment below and update the code to test the property netWorthUsd
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency_code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property currencyName (base name: "currency_name")', function() {
      // uncomment below and update the code to test the property currencyName
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property marketabilityCode (base name: "marketability_code")', function() {
      // uncomment below and update the code to test the property marketabilityCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property marketabilityDescription (base name: "marketability_description")', function() {
      // uncomment below and update the code to test the property marketabilityDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalEmployees (base name: "total_employees")', function() {
      // uncomment below and update the code to test the property totalEmployees
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalEmployeesIndicator (base name: "total_employees_indicator")', function() {
      // uncomment below and update the code to test the property totalEmployeesIndicator
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalEmployeesIndicatorDescription (base name: "total_employees_indicator_description")', function() {
      // uncomment below and update the code to test the property totalEmployeesIndicatorDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalEmployeesPhysicalAddress (base name: "total_employees_physical_address")', function() {
      // uncomment below and update the code to test the property totalEmployeesPhysicalAddress
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalEmployeesPhysicalAddressIndicator (base name: "total_employees_physical_address_indicator")', function() {
      // uncomment below and update the code to test the property totalEmployeesPhysicalAddressIndicator
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property importExportIndicator (base name: "import_export_indicator")', function() {
      // uncomment below and update the code to test the property importExportIndicator
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property importExportIndicatorDescription (base name: "import_export_indicator_description")', function() {
      // uncomment below and update the code to test the property importExportIndicatorDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property legalFormCode (base name: "legal_form_code")', function() {
      // uncomment below and update the code to test the property legalFormCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property legalFormDescription (base name: "legal_form_description")', function() {
      // uncomment below and update the code to test the property legalFormDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property businessStructureCode (base name: "business_structure_code")', function() {
      // uncomment below and update the code to test the property businessStructureCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property businessStructureDescription (base name: "business_structure_description")', function() {
      // uncomment below and update the code to test the property businessStructureDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property businessRegistrationNumberCode (base name: "business_registration_number_code")', function() {
      // uncomment below and update the code to test the property businessRegistrationNumberCode
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property businessRegistrationNumberCodeDescription (base name: "business_registration_number_code_description")', function() {
      // uncomment below and update the code to test the property businessRegistrationNumberCodeDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property undeliverableIndicator (base name: "undeliverable_indicator")', function() {
      // uncomment below and update the code to test the property undeliverableIndicator
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property undeliverableDescription (base name: "undeliverable_description")', function() {
      // uncomment below and update the code to test the property undeliverableDescription
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property financialStatementDate (base name: "financial_statement_date")', function() {
      // uncomment below and update the code to test the property financialStatementDate
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property reportDate (base name: "report_date")', function() {
      // uncomment below and update the code to test the property reportDate
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property isOnlyAvailableAddress (base name: "is_only_available_address")', function() {
      // uncomment below and update the code to test the property isOnlyAvailableAddress
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property isSubsidiary (base name: "is_subsidiary")', function() {
      // uncomment below and update the code to test the property isSubsidiary
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalEmployeesIncludingPrincipalsIndicator (base name: "total_employees_including_principals_indicator")', function() {
      // uncomment below and update the code to test the property totalEmployeesIncludingPrincipalsIndicator
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

    it('should have the property isOutOfBusiness (base name: "is_out_of_business")', function() {
      // uncomment below and update the code to test the property isOutOfBusiness
      //var instane = new DatamillForApplications.BusinessDataDunsResolveResponse();
      //expect(instance).to.be();
    });

  });

}));
