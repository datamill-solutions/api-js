/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BusinessDataDunsRatingResponse', 'model/BusinessDataDunsResolveResponse', 'model/BusinessDataDunsSearchResponse', 'model/ErrorForbidden', 'model/ErrorIncorrectParameters', 'model/ErrorInternalError', 'model/ErrorMissingParameters', 'model/ErrorNotAllowed', 'model/ErrorNotFound', 'model/ErrorQuotaExceeded', 'model/ErrorServiceUnavailable', 'model/ErrorUnauthorized'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BusinessDataDunsRatingResponse'), require('../model/BusinessDataDunsResolveResponse'), require('../model/BusinessDataDunsSearchResponse'), require('../model/ErrorForbidden'), require('../model/ErrorIncorrectParameters'), require('../model/ErrorInternalError'), require('../model/ErrorMissingParameters'), require('../model/ErrorNotAllowed'), require('../model/ErrorNotFound'), require('../model/ErrorQuotaExceeded'), require('../model/ErrorServiceUnavailable'), require('../model/ErrorUnauthorized'));
  } else {
    // Browser globals (root is window)
    if (!root.DatamillForApplications) {
      root.DatamillForApplications = {};
    }
    root.DatamillForApplications.DUNSApi = factory(root.DatamillForApplications.ApiClient, root.DatamillForApplications.BusinessDataDunsRatingResponse, root.DatamillForApplications.BusinessDataDunsResolveResponse, root.DatamillForApplications.BusinessDataDunsSearchResponse, root.DatamillForApplications.ErrorForbidden, root.DatamillForApplications.ErrorIncorrectParameters, root.DatamillForApplications.ErrorInternalError, root.DatamillForApplications.ErrorMissingParameters, root.DatamillForApplications.ErrorNotAllowed, root.DatamillForApplications.ErrorNotFound, root.DatamillForApplications.ErrorQuotaExceeded, root.DatamillForApplications.ErrorServiceUnavailable, root.DatamillForApplications.ErrorUnauthorized);
  }
}(this, function(ApiClient, BusinessDataDunsRatingResponse, BusinessDataDunsResolveResponse, BusinessDataDunsSearchResponse, ErrorForbidden, ErrorIncorrectParameters, ErrorInternalError, ErrorMissingParameters, ErrorNotAllowed, ErrorNotFound, ErrorQuotaExceeded, ErrorServiceUnavailable, ErrorUnauthorized) {
  'use strict';

  /**
   * DUNS service.
   * @module api/DUNSApi
   * @version 1.6.4
   */

  /**
   * Constructs a new DUNSApi. 
   * @alias module:api/DUNSApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDUNSRating operation.
     * @callback module:api/DUNSApi~getDUNSRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessDataDunsRatingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get marketing information by DUNS number
     * Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} dunsNumber The D-U-N-S number you are looking for detailed information
     * @param {String} reasonCode Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement 
     * @param {module:api/DUNSApi~getDUNSRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessDataDunsRatingResponse}
     */
    this.getDUNSRating = function(license, guid, dunsNumber, reasonCode, callback) {
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling getDUNSRating");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling getDUNSRating");
      }

      // verify the required parameter 'dunsNumber' is set
      if (dunsNumber == undefined || dunsNumber == null) {
        throw new Error("Missing the required parameter 'dunsNumber' when calling getDUNSRating");
      }

      // verify the required parameter 'reasonCode' is set
      if (reasonCode == undefined || reasonCode == null) {
        throw new Error("Missing the required parameter 'reasonCode' when calling getDUNSRating");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'duns_number': dunsNumber,
        'reason_code': reasonCode
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BusinessDataDunsRatingResponse;

      return this.apiClient.callApi(
        '/business-data/duns/rating', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveDUNS operation.
     * @callback module:api/DUNSApi~resolveDUNSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessDataDunsResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve company information by DUNS number
     * Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} dunsNumber The D-U-N-S number you are looking for detailed information
     * @param {String} reasonCode Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement 
     * @param {module:api/DUNSApi~resolveDUNSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessDataDunsResolveResponse}
     */
    this.resolveDUNS = function(license, guid, dunsNumber, reasonCode, callback) {
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling resolveDUNS");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling resolveDUNS");
      }

      // verify the required parameter 'dunsNumber' is set
      if (dunsNumber == undefined || dunsNumber == null) {
        throw new Error("Missing the required parameter 'dunsNumber' when calling resolveDUNS");
      }

      // verify the required parameter 'reasonCode' is set
      if (reasonCode == undefined || reasonCode == null) {
        throw new Error("Missing the required parameter 'reasonCode' when calling resolveDUNS");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'duns_number': dunsNumber,
        'reason_code': reasonCode
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BusinessDataDunsResolveResponse;

      return this.apiClient.callApi(
        '/business-data/duns/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDUNS operation.
     * @callback module:api/DUNSApi~searchDUNSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessDataDunsSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find DUNS number and company information by name
     * Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} countryCode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyName The company name you are looking for or relevant parts of it (may be empty if the duns_number is set)
     * @param {String} opts.dunsNumber The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set)
     * @param {String} opts.state Filter to get only companies which matches the specified state (required for United States)
     * @param {String} opts.city Filter to get only companies which matches the specified city
     * @param {String} opts.zip Filter to get only companies which matches the specified postal code
     * @param {String} opts.street Filter to get only companies which matches the specified street
     * @param {module:api/DUNSApi~searchDUNSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessDataDunsSearchResponse}
     */
    this.searchDUNS = function(license, guid, countryCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling searchDUNS");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling searchDUNS");
      }

      // verify the required parameter 'countryCode' is set
      if (countryCode == undefined || countryCode == null) {
        throw new Error("Missing the required parameter 'countryCode' when calling searchDUNS");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'company_name': opts['companyName'],
        'country_code': countryCode,
        'duns_number': opts['dunsNumber'],
        'state': opts['state'],
        'city': opts['city'],
        'zip': opts['zip'],
        'street': opts['street']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BusinessDataDunsSearchResponse;

      return this.apiClient.callApi(
        '/business-data/duns/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
