/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Datamill/ApiClient', 'Datamill/Datamill/AddressHouseNumberExtractResponse', 'Datamill/Datamill/AddressSearchMultipleResponse', 'Datamill/Datamill/AddressSearchResponse', 'Datamill/Datamill/BicCheckResponse', 'Datamill/Datamill/BusinessDataDunsRatingResponse', 'Datamill/Datamill/BusinessDataDunsResolveResponse', 'Datamill/Datamill/BusinessDataDunsSearchResponse', 'Datamill/Datamill/BusinessDataUndeliverableContactsResponse', 'Datamill/Datamill/ConvertCapitalFirstResponse', 'Datamill/Datamill/ConvertLowerCaseResponse', 'Datamill/Datamill/ConvertUpperCaseResponse', 'Datamill/Datamill/ConvertWrapResponse', 'Datamill/Datamill/EmailDomainCheckResponse', 'Datamill/Datamill/EmailExtendedCheckResponse', 'Datamill/Datamill/EmailSyntaxCheckResponse', 'Datamill/Datamill/ErrorForbidden', 'Datamill/Datamill/ErrorIncorrectParameters', 'Datamill/Datamill/ErrorInternalError', 'Datamill/Datamill/ErrorMissingParameters', 'Datamill/Datamill/ErrorNotAllowed', 'Datamill/Datamill/ErrorNotFound', 'Datamill/Datamill/ErrorQuotaExceeded', 'Datamill/Datamill/ErrorServiceUnavailable', 'Datamill/Datamill/ErrorUnauthorized', 'Datamill/Datamill/FirstNameGetResponse', 'Datamill/Datamill/GenderExtendedGetResponse', 'Datamill/Datamill/GenderGetResponse', 'Datamill/Datamill/IbanCheckResponse', 'Datamill/Datamill/PhoneCountryCodeGetResponse', 'Datamill/Datamill/PhoneFormatResponse', 'Datamill/Datamill/PhoneMobileCheckResponse', 'Datamill/Datamill/PhoneticCodeGetResponse', 'Datamill/Datamill/SocialMediaActivitiesGetResponse', 'Datamill/Datamill/UrlCheckResponse', 'Datamill/Datamill/VatCheckResponse', 'Datamill/Datamill/VatResolveResponse', 'Datamill/Datamill/VatSearchResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Datamill/AddressHouseNumberExtractResponse'), require('../Datamill/AddressSearchMultipleResponse'), require('../Datamill/AddressSearchResponse'), require('../Datamill/BicCheckResponse'), require('../Datamill/BusinessDataDunsRatingResponse'), require('../Datamill/BusinessDataDunsResolveResponse'), require('../Datamill/BusinessDataDunsSearchResponse'), require('../Datamill/BusinessDataUndeliverableContactsResponse'), require('../Datamill/ConvertCapitalFirstResponse'), require('../Datamill/ConvertLowerCaseResponse'), require('../Datamill/ConvertUpperCaseResponse'), require('../Datamill/ConvertWrapResponse'), require('../Datamill/EmailDomainCheckResponse'), require('../Datamill/EmailExtendedCheckResponse'), require('../Datamill/EmailSyntaxCheckResponse'), require('../Datamill/ErrorForbidden'), require('../Datamill/ErrorIncorrectParameters'), require('../Datamill/ErrorInternalError'), require('../Datamill/ErrorMissingParameters'), require('../Datamill/ErrorNotAllowed'), require('../Datamill/ErrorNotFound'), require('../Datamill/ErrorQuotaExceeded'), require('../Datamill/ErrorServiceUnavailable'), require('../Datamill/ErrorUnauthorized'), require('../Datamill/FirstNameGetResponse'), require('../Datamill/GenderExtendedGetResponse'), require('../Datamill/GenderGetResponse'), require('../Datamill/IbanCheckResponse'), require('../Datamill/PhoneCountryCodeGetResponse'), require('../Datamill/PhoneFormatResponse'), require('../Datamill/PhoneMobileCheckResponse'), require('../Datamill/PhoneticCodeGetResponse'), require('../Datamill/SocialMediaActivitiesGetResponse'), require('../Datamill/UrlCheckResponse'), require('../Datamill/VatCheckResponse'), require('../Datamill/VatResolveResponse'), require('../Datamill/VatSearchResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.datamill-js-client) {
      root.datamill-js-client = {};
    }
    root.datamill-js-client.DataMillApi = factory(root.datamill-js-client.ApiClient, root.datamill-js-client.AddressHouseNumberExtractResponse, root.datamill-js-client.AddressSearchMultipleResponse, root.datamill-js-client.AddressSearchResponse, root.datamill-js-client.BicCheckResponse, root.datamill-js-client.BusinessDataDunsRatingResponse, root.datamill-js-client.BusinessDataDunsResolveResponse, root.datamill-js-client.BusinessDataDunsSearchResponse, root.datamill-js-client.BusinessDataUndeliverableContactsResponse, root.datamill-js-client.ConvertCapitalFirstResponse, root.datamill-js-client.ConvertLowerCaseResponse, root.datamill-js-client.ConvertUpperCaseResponse, root.datamill-js-client.ConvertWrapResponse, root.datamill-js-client.EmailDomainCheckResponse, root.datamill-js-client.EmailExtendedCheckResponse, root.datamill-js-client.EmailSyntaxCheckResponse, root.datamill-js-client.ErrorForbidden, root.datamill-js-client.ErrorIncorrectParameters, root.datamill-js-client.ErrorInternalError, root.datamill-js-client.ErrorMissingParameters, root.datamill-js-client.ErrorNotAllowed, root.datamill-js-client.ErrorNotFound, root.datamill-js-client.ErrorQuotaExceeded, root.datamill-js-client.ErrorServiceUnavailable, root.datamill-js-client.ErrorUnauthorized, root.datamill-js-client.FirstNameGetResponse, root.datamill-js-client.GenderExtendedGetResponse, root.datamill-js-client.GenderGetResponse, root.datamill-js-client.IbanCheckResponse, root.datamill-js-client.PhoneCountryCodeGetResponse, root.datamill-js-client.PhoneFormatResponse, root.datamill-js-client.PhoneMobileCheckResponse, root.datamill-js-client.PhoneticCodeGetResponse, root.datamill-js-client.SocialMediaActivitiesGetResponse, root.datamill-js-client.UrlCheckResponse, root.datamill-js-client.VatCheckResponse, root.datamill-js-client.VatResolveResponse, root.datamill-js-client.VatSearchResponse);
  }
}(this, function(ApiClient, AddressHouseNumberExtractResponse, AddressSearchMultipleResponse, AddressSearchResponse, BicCheckResponse, BusinessDataDunsRatingResponse, BusinessDataDunsResolveResponse, BusinessDataDunsSearchResponse, BusinessDataUndeliverableContactsResponse, ConvertCapitalFirstResponse, ConvertLowerCaseResponse, ConvertUpperCaseResponse, ConvertWrapResponse, EmailDomainCheckResponse, EmailExtendedCheckResponse, EmailSyntaxCheckResponse, ErrorForbidden, ErrorIncorrectParameters, ErrorInternalError, ErrorMissingParameters, ErrorNotAllowed, ErrorNotFound, ErrorQuotaExceeded, ErrorServiceUnavailable, ErrorUnauthorized, FirstNameGetResponse, GenderExtendedGetResponse, GenderGetResponse, IbanCheckResponse, PhoneCountryCodeGetResponse, PhoneFormatResponse, PhoneMobileCheckResponse, PhoneticCodeGetResponse, SocialMediaActivitiesGetResponse, UrlCheckResponse, VatCheckResponse, VatResolveResponse, VatSearchResponse) {
  'use strict';

  /**
   * DataMill service.
   * @module Datamill/Datamill/DataMillApi
   * @version 1.6.5
   */

  /**
   * Constructs a new DataMillApi. 
   * @alias module:Datamill/Datamill/DataMillApi
   * @class
   * @param {module:Datamill/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Datamill/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the checkBIC operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkBICCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/BicCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check BIC for spelling
     * Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
     * @param {String} bic BIC to be checked
     * @param {module:Datamill/Datamill/DataMillApi~checkBICCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/BicCheckResponse}
     */
    this.checkBIC = function(bic, callback) {
      var postBody = null;

      // verify the required parameter 'bic' is set
      if (bic == undefined || bic == null) {
        throw new Error("Missing the required parameter 'bic' when calling checkBIC");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'bic': bic
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BicCheckResponse;

      return this.apiClient.callApi(
        '/bic/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkEmailDomain operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkEmailDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/EmailDomainCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check email syntax and mail server domain
     * Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
     * @param {String} email The email address to be checked
     * @param {module:Datamill/Datamill/DataMillApi~checkEmailDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/EmailDomainCheckResponse}
     */
    this.checkEmailDomain = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling checkEmailDomain");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = EmailDomainCheckResponse;

      return this.apiClient.callApi(
        '/email/domain/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkEmailMailbox operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkEmailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/EmailExtendedCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check email syntax, mail server domain and mailbox itself
     * Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
     * @param {String} email The email address to be checked
     * @param {module:Datamill/Datamill/DataMillApi~checkEmailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/EmailExtendedCheckResponse}
     */
    this.checkEmailMailbox = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling checkEmailMailbox");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = EmailExtendedCheckResponse;

      return this.apiClient.callApi(
        '/email/extended/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkEmailSyntax operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkEmailSyntaxCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/EmailSyntaxCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check email syntax
     * Checks the spelling of an email address to detect typos and spelling errors. 
     * @param {String} email The email address to be checked
     * @param {module:Datamill/Datamill/DataMillApi~checkEmailSyntaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/EmailSyntaxCheckResponse}
     */
    this.checkEmailSyntax = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling checkEmailSyntax");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = EmailSyntaxCheckResponse;

      return this.apiClient.callApi(
        '/email/syntax/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIBAN operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkIBANCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/IbanCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check IBAN for spelling
     * Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
     * @param {String} iban IBAN to be checked.
     * @param {module:Datamill/Datamill/DataMillApi~checkIBANCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/IbanCheckResponse}
     */
    this.checkIBAN = function(iban, callback) {
      var postBody = null;

      // verify the required parameter 'iban' is set
      if (iban == undefined || iban == null) {
        throw new Error("Missing the required parameter 'iban' when calling checkIBAN");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'iban': iban
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = IbanCheckResponse;

      return this.apiClient.callApi(
        '/iban/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkMobilePhone operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkMobilePhoneCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/PhoneMobileCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify mobile phone number
     * Real time validation of mobile numbers without triggering a call of send a text message.
     * @param {String} phonenumber Mobile phone number to be verified.
     * @param {String} countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {module:Datamill/Datamill/DataMillApi~checkMobilePhoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/PhoneMobileCheckResponse}
     */
    this.checkMobilePhone = function(phonenumber, countrycode, callback) {
      var postBody = null;

      // verify the required parameter 'phonenumber' is set
      if (phonenumber == undefined || phonenumber == null) {
        throw new Error("Missing the required parameter 'phonenumber' when calling checkMobilePhone");
      }

      // verify the required parameter 'countrycode' is set
      if (countrycode == undefined || countrycode == null) {
        throw new Error("Missing the required parameter 'countrycode' when calling checkMobilePhone");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'phonenumber': phonenumber,
        'countrycode': countrycode
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PhoneMobileCheckResponse;

      return this.apiClient.callApi(
        '/phone/mobile/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUrl operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/UrlCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about web resources
     * Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
     * @param {String} url The url to be checked (e.g. any website)
     * @param {Object} opts Optional parameters
     * @param {String} opts.maxRedirects The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (default to 10)
     * @param {module:Datamill/Datamill/DataMillApi~checkUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/UrlCheckResponse}
     */
    this.checkUrl = function(url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'url' is set
      if (url == undefined || url == null) {
        throw new Error("Missing the required parameter 'url' when calling checkUrl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'url': url,
        'max_redirects': opts['maxRedirects']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = UrlCheckResponse;

      return this.apiClient.callApi(
        '/url/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkVAT operation.
     * @callback module:Datamill/Datamill/DataMillApi~checkVATCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/VatCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check vat number for correctness
     * Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
     * @param {String} vatnumber The VAT number of a company within the European Union
     * @param {module:Datamill/Datamill/DataMillApi~checkVATCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/VatCheckResponse}
     */
    this.checkVAT = function(vatnumber, callback) {
      var postBody = null;

      // verify the required parameter 'vatnumber' is set
      if (vatnumber == undefined || vatnumber == null) {
        throw new Error("Missing the required parameter 'vatnumber' when calling checkVAT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'vatnumber': vatnumber
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = VatCheckResponse;

      return this.apiClient.callApi(
        '/vat/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertCapitalFirst operation.
     * @callback module:Datamill/Datamill/DataMillApi~convertCapitalFirstCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/ConvertCapitalFirstResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert any string to capitalize words
     * Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
     * @param {String} text Free-form text to be converted.
     * @param {module:Datamill/Datamill/DataMillApi~convertCapitalFirstCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/ConvertCapitalFirstResponse}
     */
    this.convertCapitalFirst = function(text, callback) {
      var postBody = null;

      // verify the required parameter 'text' is set
      if (text == undefined || text == null) {
        throw new Error("Missing the required parameter 'text' when calling convertCapitalFirst");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'text': text
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ConvertCapitalFirstResponse;

      return this.apiClient.callApi(
        '/convert/capitalfirst', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertLowerCase operation.
     * @callback module:Datamill/Datamill/DataMillApi~convertLowerCaseCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/ConvertLowerCaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert any string to lower case
     * Converts all letters of any word in a given string in the respective lowercase. 
     * @param {String} text Free-form text to be converted.
     * @param {module:Datamill/Datamill/DataMillApi~convertLowerCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/ConvertLowerCaseResponse}
     */
    this.convertLowerCase = function(text, callback) {
      var postBody = null;

      // verify the required parameter 'text' is set
      if (text == undefined || text == null) {
        throw new Error("Missing the required parameter 'text' when calling convertLowerCase");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'text': text
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ConvertLowerCaseResponse;

      return this.apiClient.callApi(
        '/convert/lowercase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertUpperCase operation.
     * @callback module:Datamill/Datamill/DataMillApi~convertUpperCaseCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/ConvertUpperCaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert any string to upper case
     * Converts all letters of any word in a given string in the respective capital. 
     * @param {String} text Free-form text to be converted.
     * @param {module:Datamill/Datamill/DataMillApi~convertUpperCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/ConvertUpperCaseResponse}
     */
    this.convertUpperCase = function(text, callback) {
      var postBody = null;

      // verify the required parameter 'text' is set
      if (text == undefined || text == null) {
        throw new Error("Missing the required parameter 'text' when calling convertUpperCase");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'text': text
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ConvertUpperCaseResponse;

      return this.apiClient.callApi(
        '/convert/uppercase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertWrap operation.
     * @callback module:Datamill/Datamill/DataMillApi~convertWrapCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/ConvertWrapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wrap text
     * Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
     * @param {String} text Fre-form text to be wrapped.
     * @param {Number} limit The number of characters a linefeed will be inserted after (maximum character length per line).
     * @param {Object} opts Optional parameters
     * @param {module:Datamill/Datamill/String} opts.mode The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit. 
     * @param {module:Datamill/Datamill/String} opts.linebreak Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;* 
     * @param {module:Datamill/Datamill/DataMillApi~convertWrapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/ConvertWrapResponse}
     */
    this.convertWrap = function(text, limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'text' is set
      if (text == undefined || text == null) {
        throw new Error("Missing the required parameter 'text' when calling convertWrap");
      }

      // verify the required parameter 'limit' is set
      if (limit == undefined || limit == null) {
        throw new Error("Missing the required parameter 'limit' when calling convertWrap");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'text': text,
        'limit': limit,
        'mode': opts['mode'],
        'linebreak': opts['linebreak']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ConvertWrapResponse;

      return this.apiClient.callApi(
        '/convert/wrap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the extractHouseNumber operation.
     * @callback module:Datamill/Datamill/DataMillApi~extractHouseNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressHouseNumberExtractResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Try to extract house number from street information
     * Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.street Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset.
     * @param {String} opts.housenumber Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset.
     * @param {module:Datamill/Datamill/DataMillApi~extractHouseNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressHouseNumberExtractResponse}
     */
    this.extractHouseNumber = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'street': opts['street'],
        'housenumber': opts['housenumber']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressHouseNumberExtractResponse;

      return this.apiClient.callApi(
        '/address/housenumber/extract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the formatPhoneNumber operation.
     * @callback module:Datamill/Datamill/DataMillApi~formatPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/PhoneFormatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse, format and validate phone numbers
     * Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
     * @param {String} phonenumber Phone number to be formatted and validated
     * @param {String} countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format) 
     * @param {String} opts.directDialingDelimiter Optional define a special character (e.g. -) as delimiter between the phone number and the extension.
     * @param {String} opts.allowedDelimiters Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string.
     * @param {module:Datamill/Datamill/DataMillApi~formatPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/PhoneFormatResponse}
     */
    this.formatPhoneNumber = function(phonenumber, countrycode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'phonenumber' is set
      if (phonenumber == undefined || phonenumber == null) {
        throw new Error("Missing the required parameter 'phonenumber' when calling formatPhoneNumber");
      }

      // verify the required parameter 'countrycode' is set
      if (countrycode == undefined || countrycode == null) {
        throw new Error("Missing the required parameter 'countrycode' when calling formatPhoneNumber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'phonenumber': phonenumber,
        'countrycode': countrycode,
        'format': opts['format'],
        'direct_dialing_delimiter': opts['directDialingDelimiter'],
        'allowed_delimiters': opts['allowedDelimiters']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PhoneFormatResponse;

      return this.apiClient.callApi(
        '/phone/format', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDUNSRating operation.
     * @callback module:Datamill/Datamill/DataMillApi~getDUNSRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/BusinessDataDunsRatingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get marketing information by DUNS number
     * Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
     * @param {String} dunsNumber The D-U-N-S number you are looking for detailed information
     * @param {String} reasonCode Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement 
     * @param {module:Datamill/Datamill/DataMillApi~getDUNSRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/BusinessDataDunsRatingResponse}
     */
    this.getDUNSRating = function(dunsNumber, reasonCode, callback) {
      var postBody = null;

      // verify the required parameter 'dunsNumber' is set
      if (dunsNumber == undefined || dunsNumber == null) {
        throw new Error("Missing the required parameter 'dunsNumber' when calling getDUNSRating");
      }

      // verify the required parameter 'reasonCode' is set
      if (reasonCode == undefined || reasonCode == null) {
        throw new Error("Missing the required parameter 'reasonCode' when calling getDUNSRating");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'duns_number': dunsNumber,
        'reason_code': reasonCode
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BusinessDataDunsRatingResponse;

      return this.apiClient.callApi(
        '/business-data/duns/rating', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirstNames operation.
     * @callback module:Datamill/Datamill/DataMillApi~getFirstNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/FirstNameGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recognize and extract first names
     * Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
     * @param {String} name Full name to detect all first names and extract them
     * @param {module:Datamill/Datamill/DataMillApi~getFirstNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/FirstNameGetResponse}
     */
    this.getFirstNames = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling getFirstNames");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = FirstNameGetResponse;

      return this.apiClient.callApi(
        '/firstname/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGender operation.
     * @callback module:Datamill/Datamill/DataMillApi~getGenderCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/GenderGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recognize gender by first name
     * Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
     * @param {String} firstname First name to recognize gender.
     * @param {module:Datamill/Datamill/DataMillApi~getGenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/GenderGetResponse}
     */
    this.getGender = function(firstname, callback) {
      var postBody = null;

      // verify the required parameter 'firstname' is set
      if (firstname == undefined || firstname == null) {
        throw new Error("Missing the required parameter 'firstname' when calling getGender");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'firstname': firstname
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = GenderGetResponse;

      return this.apiClient.callApi(
        '/gender/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenderExtended operation.
     * @callback module:Datamill/Datamill/DataMillApi~getGenderExtendedCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/GenderExtendedGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recognize gender by first name (advanced)
     * Recognizes the gender of a given first name considering country specific peculiarities.
     * @param {String} firstname First name to recognize gender.
     * @param {String} countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {module:Datamill/Datamill/DataMillApi~getGenderExtendedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/GenderExtendedGetResponse}
     */
    this.getGenderExtended = function(firstname, countrycode, callback) {
      var postBody = null;

      // verify the required parameter 'firstname' is set
      if (firstname == undefined || firstname == null) {
        throw new Error("Missing the required parameter 'firstname' when calling getGenderExtended");
      }

      // verify the required parameter 'countrycode' is set
      if (countrycode == undefined || countrycode == null) {
        throw new Error("Missing the required parameter 'countrycode' when calling getGenderExtended");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'firstname': firstname,
        'countrycode': countrycode
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = GenderExtendedGetResponse;

      return this.apiClient.callApi(
        '/gender/extended/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhoneCountryCode operation.
     * @callback module:Datamill/Datamill/DataMillApi~getPhoneCountryCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/PhoneCountryCodeGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * International and national dial prefix
     * Resolves the national and international dial prefix for a country specified by the given ISO country code.
     * @param {String} countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {module:Datamill/Datamill/DataMillApi~getPhoneCountryCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/PhoneCountryCodeGetResponse}
     */
    this.getPhoneCountryCode = function(countrycode, callback) {
      var postBody = null;

      // verify the required parameter 'countrycode' is set
      if (countrycode == undefined || countrycode == null) {
        throw new Error("Missing the required parameter 'countrycode' when calling getPhoneCountryCode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'countrycode': countrycode
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PhoneCountryCodeGetResponse;

      return this.apiClient.callApi(
        '/phone/countrycode/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhoneticCode operation.
     * @callback module:Datamill/Datamill/DataMillApi~getPhoneticCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/PhoneticCodeGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate phonetic codes of a given text
     * Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
     * @param {String} text The text which should be converted. Each word will be converted separatly and generate a single entry in the result. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.phoneticAlgorithm The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon 
     * @param {module:Datamill/Datamill/DataMillApi~getPhoneticCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/PhoneticCodeGetResponse}
     */
    this.getPhoneticCode = function(text, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'text' is set
      if (text == undefined || text == null) {
        throw new Error("Missing the required parameter 'text' when calling getPhoneticCode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'text': text,
        'phonetic_algorithm': opts['phoneticAlgorithm']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PhoneticCodeGetResponse;

      return this.apiClient.callApi(
        '/phonetic/code/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialMediaActivities operation.
     * @callback module:Datamill/Datamill/DataMillApi~getSocialMediaActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/SocialMediaActivitiesGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve social media data by email address
     * Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
     * @param {String} email The person&#39;s email address being checked on mentioned social media plattforms
     * @param {module:Datamill/Datamill/DataMillApi~getSocialMediaActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/SocialMediaActivitiesGetResponse}
     */
    this.getSocialMediaActivities = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling getSocialMediaActivities");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SocialMediaActivitiesGetResponse;

      return this.apiClient.callApi(
        '/social-media/activities/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the locateAddress operation.
     * @callback module:Datamill/Datamill/DataMillApi~locateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse address lookup
     * Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
     * @param {String} latitude Latitude of the address (use a dot as decimal point)
     * @param {String} longitude Longitude of the address (use a dot as decimal point)
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code).
     * @param {module:Datamill/Datamill/DataMillApi~locateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressSearchResponse}
     */
    this.locateAddress = function(latitude, longitude, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'latitude' is set
      if (latitude == undefined || latitude == null) {
        throw new Error("Missing the required parameter 'latitude' when calling locateAddress");
      }

      // verify the required parameter 'longitude' is set
      if (longitude == undefined || longitude == null) {
        throw new Error("Missing the required parameter 'longitude' when calling locateAddress");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'latitude': latitude,
        'longitude': longitude,
        'locale': opts['locale']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressSearchResponse;

      return this.apiClient.callApi(
        '/address/locate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveDUNS operation.
     * @callback module:Datamill/Datamill/DataMillApi~resolveDUNSCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/BusinessDataDunsResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve company information by DUNS number
     * Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
     * @param {String} dunsNumber The D-U-N-S number you are looking for detailed information
     * @param {String} reasonCode Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement 
     * @param {module:Datamill/Datamill/DataMillApi~resolveDUNSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/BusinessDataDunsResolveResponse}
     */
    this.resolveDUNS = function(dunsNumber, reasonCode, callback) {
      var postBody = null;

      // verify the required parameter 'dunsNumber' is set
      if (dunsNumber == undefined || dunsNumber == null) {
        throw new Error("Missing the required parameter 'dunsNumber' when calling resolveDUNS");
      }

      // verify the required parameter 'reasonCode' is set
      if (reasonCode == undefined || reasonCode == null) {
        throw new Error("Missing the required parameter 'reasonCode' when calling resolveDUNS");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'duns_number': dunsNumber,
        'reason_code': reasonCode
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BusinessDataDunsResolveResponse;

      return this.apiClient.callApi(
        '/business-data/duns/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveVAT operation.
     * @callback module:Datamill/Datamill/DataMillApi~resolveVATCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/VatResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Try to resolve VAT number to company information
     * Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
     * @param {String} vatnumber The VAT number of a company within the European Union
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code).
     * @param {module:Datamill/Datamill/DataMillApi~resolveVATCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/VatResolveResponse}
     */
    this.resolveVAT = function(vatnumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vatnumber' is set
      if (vatnumber == undefined || vatnumber == null) {
        throw new Error("Missing the required parameter 'vatnumber' when calling resolveVAT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'vatnumber': vatnumber,
        'locale': opts['locale']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = VatResolveResponse;

      return this.apiClient.callApi(
        '/vat/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAddress operation.
     * @callback module:Datamill/Datamill/DataMillApi~searchAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup physical postal address
     * Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.address Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search. 
     * @param {String} opts.country Specify the country using the country code (ISO 3166-1 alpha-3) or the country name.
     * @param {String} opts.state First subdivision level below the country. Specify the state using full or abbreviated notation.
     * @param {String} opts.county Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable.
     * @param {String} opts.city The city name.
     * @param {String} opts.zip Postal code defined by the government of the country.
     * @param {String} opts.district Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable.
     * @param {String} opts.street The street name.
     * @param {String} opts.housenumber The house number or building name.
     * @param {String} opts.locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code).
     * @param {module:Datamill/Datamill/DataMillApi~searchAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressSearchResponse}
     */
    this.searchAddress = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'address': opts['address'],
        'country': opts['country'],
        'state': opts['state'],
        'county': opts['county'],
        'city': opts['city'],
        'zip': opts['zip'],
        'district': opts['district'],
        'street': opts['street'],
        'housenumber': opts['housenumber'],
        'locale': opts['locale']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressSearchResponse;

      return this.apiClient.callApi(
        '/address/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAddressMultiple operation.
     * @callback module:Datamill/Datamill/DataMillApi~searchAddressMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressSearchMultipleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Address lookup with multiple possible results
     * Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
     * @param {String} address Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code).
     * @param {module:Datamill/Datamill/DataMillApi~searchAddressMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressSearchMultipleResponse}
     */
    this.searchAddressMultiple = function(address, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address == undefined || address == null) {
        throw new Error("Missing the required parameter 'address' when calling searchAddressMultiple");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'address': address,
        'locale': opts['locale']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressSearchMultipleResponse;

      return this.apiClient.callApi(
        '/address/search/multiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDUNS operation.
     * @callback module:Datamill/Datamill/DataMillApi~searchDUNSCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/BusinessDataDunsSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find DUNS number and company information by name
     * Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
     * @param {String} countryCode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyName The company name you are looking for or relevant parts of it (may be empty if the duns_number is set)
     * @param {String} opts.dunsNumber The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set)
     * @param {String} opts.state Filter to get only companies which matches the specified state (required for United States)
     * @param {String} opts.city Filter to get only companies which matches the specified city
     * @param {String} opts.zip Filter to get only companies which matches the specified postal code
     * @param {String} opts.street Filter to get only companies which matches the specified street
     * @param {module:Datamill/Datamill/DataMillApi~searchDUNSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/BusinessDataDunsSearchResponse}
     */
    this.searchDUNS = function(countryCode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryCode' is set
      if (countryCode == undefined || countryCode == null) {
        throw new Error("Missing the required parameter 'countryCode' when calling searchDUNS");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company_name': opts['companyName'],
        'country_code': countryCode,
        'duns_number': opts['dunsNumber'],
        'state': opts['state'],
        'city': opts['city'],
        'zip': opts['zip'],
        'street': opts['street']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BusinessDataDunsSearchResponse;

      return this.apiClient.callApi(
        '/business-data/duns/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUndeliverableContact operation.
     * @callback module:Datamill/Datamill/DataMillApi~searchUndeliverableContactCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/BusinessDataUndeliverableContactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find moved and deceased contacts
     * Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
     * @param {String} firstName The person&#39;s first name
     * @param {String} lastName The person&#39;s last name
     * @param {String} countryCode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {String} zip Last known postal code the person lives in
     * @param {String} street Last known street name the person lives in
     * @param {String} reason Free-form text written in english why you submit the query.
     * @param {module:Datamill/Datamill/DataMillApi~searchUndeliverableContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/BusinessDataUndeliverableContactsResponse}
     */
    this.searchUndeliverableContact = function(firstName, lastName, countryCode, zip, street, reason, callback) {
      var postBody = null;

      // verify the required parameter 'firstName' is set
      if (firstName == undefined || firstName == null) {
        throw new Error("Missing the required parameter 'firstName' when calling searchUndeliverableContact");
      }

      // verify the required parameter 'lastName' is set
      if (lastName == undefined || lastName == null) {
        throw new Error("Missing the required parameter 'lastName' when calling searchUndeliverableContact");
      }

      // verify the required parameter 'countryCode' is set
      if (countryCode == undefined || countryCode == null) {
        throw new Error("Missing the required parameter 'countryCode' when calling searchUndeliverableContact");
      }

      // verify the required parameter 'zip' is set
      if (zip == undefined || zip == null) {
        throw new Error("Missing the required parameter 'zip' when calling searchUndeliverableContact");
      }

      // verify the required parameter 'street' is set
      if (street == undefined || street == null) {
        throw new Error("Missing the required parameter 'street' when calling searchUndeliverableContact");
      }

      // verify the required parameter 'reason' is set
      if (reason == undefined || reason == null) {
        throw new Error("Missing the required parameter 'reason' when calling searchUndeliverableContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'first_name': firstName,
        'last_name': lastName,
        'country_code': countryCode,
        'zip': zip,
        'street': street,
        'reason': reason
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = BusinessDataUndeliverableContactsResponse;

      return this.apiClient.callApi(
        '/business-data/undeliverable-contacts/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVAT operation.
     * @callback module:Datamill/Datamill/DataMillApi~searchVATCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/VatSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find VAT number and company information by name
     * Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
     * @param {String} company The name of an company. You may enter the fully qualified name or only partial information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.city The city where the company&#39;s headquarters is located.
     * @param {module:Datamill/Datamill/String} opts.countryCode ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI** 
     * @param {String} opts.limit The maximum amount of results returned if multiple companies are found. Default value is **10**.  (default to 10)
     * @param {String} opts.minScore Threshold to set the minimum score rate of results being returned. Default: **0.8**  (default to 0.8)
     * @param {module:Datamill/Datamill/DataMillApi~searchVATCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/VatSearchResponse}
     */
    this.searchVAT = function(company, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'company' is set
      if (company == undefined || company == null) {
        throw new Error("Missing the required parameter 'company' when calling searchVAT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company': company,
        'city': opts['city'],
        'country_code': opts['countryCode'],
        'limit': opts['limit'],
        'min_score': opts['minScore']
      };

      var authNames = ['APISecurity'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = VatSearchResponse;

      return this.apiClient.callApi(
        '/vat/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
