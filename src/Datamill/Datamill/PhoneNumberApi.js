/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Datamill/ApiClient', 'Datamill/Datamill/ErrorForbidden', 'Datamill/Datamill/ErrorIncorrectParameters', 'Datamill/Datamill/ErrorInternalError', 'Datamill/Datamill/ErrorMissingParameters', 'Datamill/Datamill/ErrorNotAllowed', 'Datamill/Datamill/ErrorNotFound', 'Datamill/Datamill/ErrorQuotaExceeded', 'Datamill/Datamill/ErrorServiceUnavailable', 'Datamill/Datamill/ErrorUnauthorized', 'Datamill/Datamill/PhoneCountryCodeGetResponse', 'Datamill/Datamill/PhoneFormatResponse', 'Datamill/Datamill/PhoneMobileCheckResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Datamill/ErrorForbidden'), require('../Datamill/ErrorIncorrectParameters'), require('../Datamill/ErrorInternalError'), require('../Datamill/ErrorMissingParameters'), require('../Datamill/ErrorNotAllowed'), require('../Datamill/ErrorNotFound'), require('../Datamill/ErrorQuotaExceeded'), require('../Datamill/ErrorServiceUnavailable'), require('../Datamill/ErrorUnauthorized'), require('../Datamill/PhoneCountryCodeGetResponse'), require('../Datamill/PhoneFormatResponse'), require('../Datamill/PhoneMobileCheckResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.datamill-js-client) {
      root.datamill-js-client = {};
    }
    root.datamill-js-client.PhoneNumberApi = factory(root.datamill-js-client.ApiClient, root.datamill-js-client.ErrorForbidden, root.datamill-js-client.ErrorIncorrectParameters, root.datamill-js-client.ErrorInternalError, root.datamill-js-client.ErrorMissingParameters, root.datamill-js-client.ErrorNotAllowed, root.datamill-js-client.ErrorNotFound, root.datamill-js-client.ErrorQuotaExceeded, root.datamill-js-client.ErrorServiceUnavailable, root.datamill-js-client.ErrorUnauthorized, root.datamill-js-client.PhoneCountryCodeGetResponse, root.datamill-js-client.PhoneFormatResponse, root.datamill-js-client.PhoneMobileCheckResponse);
  }
}(this, function(ApiClient, ErrorForbidden, ErrorIncorrectParameters, ErrorInternalError, ErrorMissingParameters, ErrorNotAllowed, ErrorNotFound, ErrorQuotaExceeded, ErrorServiceUnavailable, ErrorUnauthorized, PhoneCountryCodeGetResponse, PhoneFormatResponse, PhoneMobileCheckResponse) {
  'use strict';

  /**
   * PhoneNumber service.
   * @module Datamill/Datamill/PhoneNumberApi
   * @version 0.0.1
   */

  /**
   * Constructs a new PhoneNumberApi. 
   * @alias module:Datamill/Datamill/PhoneNumberApi
   * @class
   * @param {module:Datamill/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Datamill/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the checkMobilePhone operation.
     * @callback module:Datamill/Datamill/PhoneNumberApi~checkMobilePhoneCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/PhoneMobileCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify mobile phone number
     * Real time validation of mobile numbers without triggering a call of send a text message.
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} phonenumber Mobile phone number to be verified.
     * @param {String} countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {module:Datamill/Datamill/PhoneNumberApi~checkMobilePhoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/PhoneMobileCheckResponse}
     */
    this.checkMobilePhone = function(license, guid, phonenumber, countrycode, callback) {
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling checkMobilePhone");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling checkMobilePhone");
      }

      // verify the required parameter 'phonenumber' is set
      if (phonenumber == undefined || phonenumber == null) {
        throw new Error("Missing the required parameter 'phonenumber' when calling checkMobilePhone");
      }

      // verify the required parameter 'countrycode' is set
      if (countrycode == undefined || countrycode == null) {
        throw new Error("Missing the required parameter 'countrycode' when calling checkMobilePhone");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'phonenumber': phonenumber,
        'countrycode': countrycode
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PhoneMobileCheckResponse;

      return this.apiClient.callApi(
        '/phone/mobile/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the formatPhoneNumber operation.
     * @callback module:Datamill/Datamill/PhoneNumberApi~formatPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/PhoneFormatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse, format and validate phone numbers
     * Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} phonenumber Phone number to be formatted and validated
     * @param {String} countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format) 
     * @param {String} opts.directDialingDelimiter Optional define a special character (e.g. -) as delimiter between the phone number and the extension.
     * @param {String} opts.allowedDelimiters Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string.
     * @param {module:Datamill/Datamill/PhoneNumberApi~formatPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/PhoneFormatResponse}
     */
    this.formatPhoneNumber = function(license, guid, phonenumber, countrycode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling formatPhoneNumber");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling formatPhoneNumber");
      }

      // verify the required parameter 'phonenumber' is set
      if (phonenumber == undefined || phonenumber == null) {
        throw new Error("Missing the required parameter 'phonenumber' when calling formatPhoneNumber");
      }

      // verify the required parameter 'countrycode' is set
      if (countrycode == undefined || countrycode == null) {
        throw new Error("Missing the required parameter 'countrycode' when calling formatPhoneNumber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'phonenumber': phonenumber,
        'countrycode': countrycode,
        'format': opts['format'],
        'direct_dialing_delimiter': opts['directDialingDelimiter'],
        'allowed_delimiters': opts['allowedDelimiters']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PhoneFormatResponse;

      return this.apiClient.callApi(
        '/phone/format', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhoneCountryCode operation.
     * @callback module:Datamill/Datamill/PhoneNumberApi~getPhoneCountryCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/PhoneCountryCodeGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * International and national dial prefix
     * Resolves the national and international dial prefix for a country specified by the given ISO country code.
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.
     * @param {module:Datamill/Datamill/PhoneNumberApi~getPhoneCountryCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/PhoneCountryCodeGetResponse}
     */
    this.getPhoneCountryCode = function(license, guid, countrycode, callback) {
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling getPhoneCountryCode");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling getPhoneCountryCode");
      }

      // verify the required parameter 'countrycode' is set
      if (countrycode == undefined || countrycode == null) {
        throw new Error("Missing the required parameter 'countrycode' when calling getPhoneCountryCode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'countrycode': countrycode
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PhoneCountryCodeGetResponse;

      return this.apiClient.callApi(
        '/phone/countrycode/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
