/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Datamill/ApiClient', 'Datamill/Datamill/AddressHouseNumberExtractResponse', 'Datamill/Datamill/AddressSearchMultipleResponse', 'Datamill/Datamill/AddressSearchResponse', 'Datamill/Datamill/ErrorForbidden', 'Datamill/Datamill/ErrorIncorrectParameters', 'Datamill/Datamill/ErrorInternalError', 'Datamill/Datamill/ErrorMissingParameters', 'Datamill/Datamill/ErrorNotAllowed', 'Datamill/Datamill/ErrorNotFound', 'Datamill/Datamill/ErrorQuotaExceeded', 'Datamill/Datamill/ErrorServiceUnavailable', 'Datamill/Datamill/ErrorUnauthorized'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Datamill/AddressHouseNumberExtractResponse'), require('../Datamill/AddressSearchMultipleResponse'), require('../Datamill/AddressSearchResponse'), require('../Datamill/ErrorForbidden'), require('../Datamill/ErrorIncorrectParameters'), require('../Datamill/ErrorInternalError'), require('../Datamill/ErrorMissingParameters'), require('../Datamill/ErrorNotAllowed'), require('../Datamill/ErrorNotFound'), require('../Datamill/ErrorQuotaExceeded'), require('../Datamill/ErrorServiceUnavailable'), require('../Datamill/ErrorUnauthorized'));
  } else {
    // Browser globals (root is window)
    if (!root.datamill-js-client) {
      root.datamill-js-client = {};
    }
    root.datamill-js-client.AddressApi = factory(root.datamill-js-client.ApiClient, root.datamill-js-client.AddressHouseNumberExtractResponse, root.datamill-js-client.AddressSearchMultipleResponse, root.datamill-js-client.AddressSearchResponse, root.datamill-js-client.ErrorForbidden, root.datamill-js-client.ErrorIncorrectParameters, root.datamill-js-client.ErrorInternalError, root.datamill-js-client.ErrorMissingParameters, root.datamill-js-client.ErrorNotAllowed, root.datamill-js-client.ErrorNotFound, root.datamill-js-client.ErrorQuotaExceeded, root.datamill-js-client.ErrorServiceUnavailable, root.datamill-js-client.ErrorUnauthorized);
  }
}(this, function(ApiClient, AddressHouseNumberExtractResponse, AddressSearchMultipleResponse, AddressSearchResponse, ErrorForbidden, ErrorIncorrectParameters, ErrorInternalError, ErrorMissingParameters, ErrorNotAllowed, ErrorNotFound, ErrorQuotaExceeded, ErrorServiceUnavailable, ErrorUnauthorized) {
  'use strict';

  /**
   * Address service.
   * @module Datamill/Datamill/AddressApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AddressApi. 
   * @alias module:Datamill/Datamill/AddressApi
   * @class
   * @param {module:Datamill/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Datamill/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the extractHouseNumber operation.
     * @callback module:Datamill/Datamill/AddressApi~extractHouseNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressHouseNumberExtractResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Try to extract house number from street information
     * Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.street Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset.
     * @param {String} opts.housenumber Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset.
     * @param {module:Datamill/Datamill/AddressApi~extractHouseNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressHouseNumberExtractResponse}
     */
    this.extractHouseNumber = function(license, guid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling extractHouseNumber");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling extractHouseNumber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'street': opts['street'],
        'housenumber': opts['housenumber']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressHouseNumberExtractResponse;

      return this.apiClient.callApi(
        '/address/housenumber/extract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the locateAddress operation.
     * @callback module:Datamill/Datamill/AddressApi~locateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse address lookup
     * Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} latitude Latitude of the address (use a dot as decimal point)
     * @param {String} longitude Longitude of the address (use a dot as decimal point)
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code).
     * @param {module:Datamill/Datamill/AddressApi~locateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressSearchResponse}
     */
    this.locateAddress = function(license, guid, latitude, longitude, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling locateAddress");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling locateAddress");
      }

      // verify the required parameter 'latitude' is set
      if (latitude == undefined || latitude == null) {
        throw new Error("Missing the required parameter 'latitude' when calling locateAddress");
      }

      // verify the required parameter 'longitude' is set
      if (longitude == undefined || longitude == null) {
        throw new Error("Missing the required parameter 'longitude' when calling locateAddress");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'latitude': latitude,
        'longitude': longitude,
        'locale': opts['locale']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressSearchResponse;

      return this.apiClient.callApi(
        '/address/locate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAddress operation.
     * @callback module:Datamill/Datamill/AddressApi~searchAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup physical postal address
     * Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.address Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search. 
     * @param {String} opts.country Specify the country using the country code (ISO 3166-1 alpha-3) or the country name.
     * @param {String} opts.state First subdivision level below the country. Specify the state using full or abbreviated notation.
     * @param {String} opts.county Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable.
     * @param {String} opts.city The city name.
     * @param {String} opts.zip Postal code defined by the government of the country.
     * @param {String} opts.district Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable.
     * @param {String} opts.street The street name.
     * @param {String} opts.housenumber The house number or building name.
     * @param {String} opts.locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code).
     * @param {module:Datamill/Datamill/AddressApi~searchAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressSearchResponse}
     */
    this.searchAddress = function(license, guid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling searchAddress");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling searchAddress");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'address': opts['address'],
        'country': opts['country'],
        'state': opts['state'],
        'county': opts['county'],
        'city': opts['city'],
        'zip': opts['zip'],
        'district': opts['district'],
        'street': opts['street'],
        'housenumber': opts['housenumber'],
        'locale': opts['locale']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressSearchResponse;

      return this.apiClient.callApi(
        '/address/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAddressMultiple operation.
     * @callback module:Datamill/Datamill/AddressApi~searchAddressMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:Datamill/Datamill/AddressSearchMultipleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Address lookup with multiple possible results
     * Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
     * @param {String} license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. 
     * @param {String} address Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code).
     * @param {module:Datamill/Datamill/AddressApi~searchAddressMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Datamill/Datamill/AddressSearchMultipleResponse}
     */
    this.searchAddressMultiple = function(license, guid, address, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'license' is set
      if (license == undefined || license == null) {
        throw new Error("Missing the required parameter 'license' when calling searchAddressMultiple");
      }

      // verify the required parameter 'guid' is set
      if (guid == undefined || guid == null) {
        throw new Error("Missing the required parameter 'guid' when calling searchAddressMultiple");
      }

      // verify the required parameter 'address' is set
      if (address == undefined || address == null) {
        throw new Error("Missing the required parameter 'address' when calling searchAddressMultiple");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'license': license,
        'guid': guid,
        'address': address,
        'locale': opts['locale']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = AddressSearchMultipleResponse;

      return this.apiClient.callApi(
        '/address/search/multiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
