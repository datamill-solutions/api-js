/**
 * /data.mill for applications
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Datamill/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.datamill-js-client) {
      root.datamill-js-client = {};
    }
    root.datamill-js-client.AddressSearchResponse = factory(root.datamill-js-client.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The AddressSearchResponse model module.
   * @module Datamill/Datamill/AddressSearchResponse
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>AddressSearchResponse</code>.
   * Response of successful transformation request for /address/_*
   * @alias module:Datamill/Datamill/AddressSearchResponse
   * @class
   * @param countryIso2 {String} ISO 3166-1 alpha-2 country code
   * @param countryIso3 {String} ISO 3166-1 alpha-3 country code
   * @param country {String} Country name together with the language information
   * @param state {String} State name/code together with the language information
   * @param stateName {String} State name together with the language information
   * @param stateCode {String} ISO 3166-2 state code (if available)
   * @param county {String} County name together with the language information (if available)
   * @param district {String} District name together with the language information (if available)
   * @param zip {String} Postal code
   * @param city {String} City name together with the language information
   * @param street {String} Street name together with the language information
   * @param housenumber {String} House number or building name together with the language information (if available)
   * @param additionalData {String} Additional house number information (e.g. floor, apartment, top)
   * @param relevance {String} Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance. 
   * @param latitude {String} Latitude to place a marker indicating the given location on a map (uses a dot as decimal point)
   * @param longitude {String} Longitude to place a marker indicating the given location on a map (uses a dot as decimal point)
   * @param navigationLatitude {String} Latitude of a potential route waypoint (uses a dot as decimal point)
   * @param navigationLongitude {String} Longitude of a potential route waypoint (uses a dot as decimal point)
   * @param matchlevel {module:Datamill/Datamill/AddressSearchResponse.MatchlevelEnum} The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). 
   */
  var exports = function(countryIso2, countryIso3, country, state, stateName, stateCode, county, district, zip, city, street, housenumber, additionalData, relevance, latitude, longitude, navigationLatitude, navigationLongitude, matchlevel) {
    var _this = this;

    _this['country_iso_2'] = countryIso2;
    _this['country_iso_3'] = countryIso3;
    _this['country'] = country;
    _this['state'] = state;
    _this['state_name'] = stateName;
    _this['state_code'] = stateCode;
    _this['county'] = county;
    _this['district'] = district;
    _this['zip'] = zip;
    _this['city'] = city;
    _this['street'] = street;
    _this['housenumber'] = housenumber;
    _this['additional_data'] = additionalData;
    _this['relevance'] = relevance;
    _this['latitude'] = latitude;
    _this['longitude'] = longitude;
    _this['navigation_latitude'] = navigationLatitude;
    _this['navigation_longitude'] = navigationLongitude;
    _this['matchlevel'] = matchlevel;
  };

  /**
   * Constructs a <code>AddressSearchResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Datamill/Datamill/AddressSearchResponse} obj Optional instance to populate.
   * @return {module:Datamill/Datamill/AddressSearchResponse} The populated <code>AddressSearchResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('country_iso_2')) {
        obj['country_iso_2'] = ApiClient.convertToType(data['country_iso_2'], 'String');
      }
      if (data.hasOwnProperty('country_iso_3')) {
        obj['country_iso_3'] = ApiClient.convertToType(data['country_iso_3'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('state_name')) {
        obj['state_name'] = ApiClient.convertToType(data['state_name'], 'String');
      }
      if (data.hasOwnProperty('state_code')) {
        obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
      }
      if (data.hasOwnProperty('county')) {
        obj['county'] = ApiClient.convertToType(data['county'], 'String');
      }
      if (data.hasOwnProperty('district')) {
        obj['district'] = ApiClient.convertToType(data['district'], 'String');
      }
      if (data.hasOwnProperty('zip')) {
        obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('street')) {
        obj['street'] = ApiClient.convertToType(data['street'], 'String');
      }
      if (data.hasOwnProperty('housenumber')) {
        obj['housenumber'] = ApiClient.convertToType(data['housenumber'], 'String');
      }
      if (data.hasOwnProperty('additional_data')) {
        obj['additional_data'] = ApiClient.convertToType(data['additional_data'], 'String');
      }
      if (data.hasOwnProperty('relevance')) {
        obj['relevance'] = ApiClient.convertToType(data['relevance'], 'String');
      }
      if (data.hasOwnProperty('latitude')) {
        obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
      }
      if (data.hasOwnProperty('longitude')) {
        obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
      }
      if (data.hasOwnProperty('navigation_latitude')) {
        obj['navigation_latitude'] = ApiClient.convertToType(data['navigation_latitude'], 'String');
      }
      if (data.hasOwnProperty('navigation_longitude')) {
        obj['navigation_longitude'] = ApiClient.convertToType(data['navigation_longitude'], 'String');
      }
      if (data.hasOwnProperty('matchlevel')) {
        obj['matchlevel'] = ApiClient.convertToType(data['matchlevel'], 'String');
      }
    }
    return obj;
  }

  /**
   * ISO 3166-1 alpha-2 country code
   * @member {String} country_iso_2
   */
  exports.prototype['country_iso_2'] = undefined;
  /**
   * ISO 3166-1 alpha-3 country code
   * @member {String} country_iso_3
   */
  exports.prototype['country_iso_3'] = undefined;
  /**
   * Country name together with the language information
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * State name/code together with the language information
   * @member {String} state
   */
  exports.prototype['state'] = undefined;
  /**
   * State name together with the language information
   * @member {String} state_name
   */
  exports.prototype['state_name'] = undefined;
  /**
   * ISO 3166-2 state code (if available)
   * @member {String} state_code
   */
  exports.prototype['state_code'] = undefined;
  /**
   * County name together with the language information (if available)
   * @member {String} county
   */
  exports.prototype['county'] = undefined;
  /**
   * District name together with the language information (if available)
   * @member {String} district
   */
  exports.prototype['district'] = undefined;
  /**
   * Postal code
   * @member {String} zip
   */
  exports.prototype['zip'] = undefined;
  /**
   * City name together with the language information
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * Street name together with the language information
   * @member {String} street
   */
  exports.prototype['street'] = undefined;
  /**
   * House number or building name together with the language information (if available)
   * @member {String} housenumber
   */
  exports.prototype['housenumber'] = undefined;
  /**
   * Additional house number information (e.g. floor, apartment, top)
   * @member {String} additional_data
   */
  exports.prototype['additional_data'] = undefined;
  /**
   * Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance. 
   * @member {String} relevance
   */
  exports.prototype['relevance'] = undefined;
  /**
   * Latitude to place a marker indicating the given location on a map (uses a dot as decimal point)
   * @member {String} latitude
   */
  exports.prototype['latitude'] = undefined;
  /**
   * Longitude to place a marker indicating the given location on a map (uses a dot as decimal point)
   * @member {String} longitude
   */
  exports.prototype['longitude'] = undefined;
  /**
   * Latitude of a potential route waypoint (uses a dot as decimal point)
   * @member {String} navigation_latitude
   */
  exports.prototype['navigation_latitude'] = undefined;
  /**
   * Longitude of a potential route waypoint (uses a dot as decimal point)
   * @member {String} navigation_longitude
   */
  exports.prototype['navigation_longitude'] = undefined;
  /**
   * The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). 
   * @member {module:Datamill/Datamill/AddressSearchResponse.MatchlevelEnum} matchlevel
   */
  exports.prototype['matchlevel'] = undefined;


  /**
   * Allowed values for the <code>matchlevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MatchlevelEnum = {
    /**
     * value: "housenumber"
     * @const
     */
    "housenumber": "housenumber",
    /**
     * value: "street"
     * @const
     */
    "street": "street",
    /**
     * value: "general"
     * @const
     */
    "general": "general",
    /**
     * value: ""
     * @const
     */
    "": ""  };


  return exports;
}));


